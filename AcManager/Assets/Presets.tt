<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.IO.Compression" #>
using System;
using System.IO.Compression;
using AcManager.Tools.Managers.Presets;
using AcTools.Utils.Helpers;

namespace AcManager.Assets {
	public static class DefaultPresets {
        private static byte[] Unpack(string packed) {
            var bytes = Convert.FromBase64String(packed);
            using (var inputStream = new System.IO.MemoryStream(bytes)) {
                return new DeflateStream(inputStream, CompressionMode.Decompress).ReadAsBytesAndDispose();
            }
        }

		public static void Initialize() {
<#
    var location = Path.GetDirectoryName(this.Host.TemplateFile);
    if (string.IsNullOrEmpty(location)) location = Environment.CurrentDirectory;
	location = Path.Combine(location, "Presets");

    foreach (var sub in Directory.GetDirectories(location)) {
        if (sub == null) continue;
        var className = Path.GetFileName(sub);
		foreach (var file in Directory.GetFiles(sub)){
			var presetName = Path.GetFileNameWithoutExtension(file);
			var index = presetName.IndexOf('@');
			if (index != -1){
				presetName = GetDict(presetName.Substring(0, index)) + "." + presetName.Substring(index + 1);
			} else {
				presetName = O(presetName);
			}

        #>
			PresetsManager.Instance.RegisterBuiltInPreset(Unpack(<#= C(File.ReadAllBytes(file)) #>), <#= O(className) #>, <#= presetName #>);
<#
		}
	}
#>
		}
	}
}
<#+
    string O(string s){ return s == null ? "null" : "@\"" + s.Replace("\"", "\"\"") + "\""; }
    string O(bool s){ return s ? "true" : "false"; }

	string GetDict(string key){
		switch (key){
			case "a": return "AppStrings";
			case "c": return "Controls.ControlsStrings";
			case "t": return "Tools.ToolsStrings";
			case "u": return "FirstFloor.ModernUI.UiStrings";
			default: return key;
		}
	}

	string C(string s){
		if (s == null) return "null";

		using (var output = new MemoryStream()){
			using (var gzip = new DeflateStream(output, CompressionMode.Compress)){
				using (var writer = new StreamWriter(gzip, System.Text.Encoding.UTF8)){
					writer.Write(s);
				}
			}

			return "@\"" + Convert.ToBase64String(output.ToArray()) + "\"";
		}
	}

	string C(byte[] s){
		if (s == null) return "null";

		using (var output = new MemoryStream()){
			using (var gzip = new DeflateStream(output, CompressionMode.Compress)){
				gzip.Write(s, 0, s.Length);
			}

			return "@\"" + Convert.ToBase64String(output.ToArray()) + "\"";
		}
	}
#>